generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Room {
  id           Int               @id @default(autoincrement())
  code         String            @unique @db.Char(12)
  name         String            @db.VarChar(30)
  photoId      Int
  photo        RoomPhoto         @relation(fields: [photoId], references: [id])
  members      RoomMember[]
  joinRequests RoomJoinRequest[]
  messages     Message[]
  status       RoomStatus        @default(Open)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@map("rooms")
}

model RoomMember {
  id          Int              @id @default(autoincrement())
  roomId      Int
  room        Room             @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId      String
  name        String?          @db.VarChar(20)
  avatarId    Int
  avatar      Avatar           @relation(fields: [avatarId], references: [id])
  isAnonymous Boolean          @default(false)
  role        RoomMemberRole
  messages    Message[]
  status      RoomMemberStatus @default(Active)
  joinedAt    DateTime         @default(now())

  @@unique([id, userId])
  @@map("room-members")
}

model Avatar {
  id           Int               @id @default(autoincrement())
  url          String
  status       AvatarStatus      @default(Active)
  members      RoomMember[]
  joinRequests RoomJoinRequest[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@map("avatars")
}

model RoomPhoto {
  id        Int             @id @default(autoincrement())
  url       String
  status    RoomPhotoStatus @default(Active)
  rooms     Room[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("room-photos")
}

model RoomJoinRequest {
  id          Int                   @id @default(autoincrement())
  userId      String
  roomId      Int
  name        String?               @db.VarChar(20)
  avatarId    Int
  avatar      Avatar                @relation(fields: [avatarId], references: [id])
  isAnonymous Boolean               @default(false)
  room        Room                  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  status      RoomJoinRequestStatus @default(Pending)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  @@map("room-join-requests")
}

model Message {
  id          Int                @id @default(autoincrement())
  roomId      Int
  room        Room               @relation(fields: [roomId], references: [id], onDelete: Cascade)
  memberId    Int
  member      RoomMember         @relation(fields: [memberId], references: [id], onDelete: Cascade)
  text        String
  contentType MessageContentType
  isDeleted   Boolean?           @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("messages")
}

enum RoomStatus {
  Open
  Closed
}

enum RoomMemberRole {
  Owner
  Member
}

enum RoomMemberStatus {
  Active
  Inactive
}

enum AvatarStatus {
  Active
  Inactive
  Deleted
}

enum RoomPhotoStatus {
  Active
  Inactive
  Deleted
}

enum RoomJoinRequestStatus {
  Pending
  Approve
  Declined
  Canceled
  Timeout
}

enum MessageContentType {
  Text
  Media
}
